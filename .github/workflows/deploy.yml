name: Deploy MyDrReferral - Free Tier

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-south-1

jobs:
  # Deploy Frontend to S3
  deploy-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: Frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd Frontend
          npm ci

      - name: Build React app
        run: |
          cd Frontend
          npm run build
          echo "Build completed. Checking output directory..."
          ls -la out/ || echo "out/ directory not found"
          echo "Contents of Frontend directory:"
          ls -la
        env:
          NEXT_PUBLIC_API_URL: http://52.66.197.58

      - name: Debug GitHub Secrets
        run: |
          echo "Checking if secrets are available..."
          if [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "✅ AWS_ACCESS_KEY_ID is set (length: ${#AWS_ACCESS_KEY_ID})"
          else
            echo "❌ AWS_ACCESS_KEY_ID is not set"
          fi
          if [ -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "✅ AWS_SECRET_ACCESS_KEY is set (length: ${#AWS_SECRET_ACCESS_KEY})"
          else
            echo "❌ AWS_SECRET_ACCESS_KEY is not set"
          fi
          if [ -n "${{ secrets.S3_BUCKET_NAME }}" ]; then
            echo "✅ S3_BUCKET_NAME is set: ${{ secrets.S3_BUCKET_NAME }}"
          else
            echo "❌ S3_BUCKET_NAME is not set"
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Verify AWS credentials
        run: |
          echo "Testing AWS credentials..."
          echo "AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:0:10}..."
          echo "AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:0:10}..."
          aws sts get-caller-identity
          echo "AWS credentials verified successfully!"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deploy to S3
        run: |
          echo "Deploying frontend to S3 bucket: ${{ secrets.S3_BUCKET_NAME }}"
          echo "Checking if Frontend/out/ directory exists..."
          if [ -d "Frontend/out" ]; then
            echo "✅ Frontend/out/ directory found"
            aws s3 sync Frontend/out/ s3://${{ secrets.S3_BUCKET_NAME }} --delete
            aws s3 cp Frontend/out/index.html s3://${{ secrets.S3_BUCKET_NAME }}/index.html
            echo "Frontend deployment completed successfully!"
          else
            echo "❌ Frontend/out/ directory not found"
            echo "Available directories in Frontend:"
            ls -la Frontend/
            echo "Trying to find build output..."
            find Frontend/ -name "*.html" -o -name "index.*" | head -10
            exit 1
          fi

  # Deploy API to EC2
  deploy-api:
    runs-on: ubuntu-latest
    needs: deploy-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: |
          cd Api
          dotnet restore

      - name: Build API
        run: |
          cd Api
          dotnet build --configuration Release --no-restore

      - name: Publish API
        run: |
          cd Api
          dotnet publish MyDrReferral.Api/MyDrReferral.Api.csproj \
            --configuration Release \
            --output ./publish \
            --no-restore

      - name: Create deployment package
        run: |
          cd Api
          tar -czf mydrreferral-api.tar.gz -C publish .

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Stop the API service
            sudo systemctl stop mydrreferral-api.service || true
            
            # Backup current deployment
            sudo cp -r /var/www/mydrreferral/Api /var/www/mydrreferral/Api.backup.$(date +%Y%m%d_%H%M%S) || true
            
            # Create deployment directory
            sudo mkdir -p /var/www/mydrreferral/Api
            sudo chown -R ec2-user:ec2-user /var/www/mydrreferral/Api

      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "Api/mydrreferral-api.tar.gz"
          target: "/var/www/mydrreferral/Api/"

      - name: Extract and start API
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /var/www/mydrreferral/Api
            tar -xzf mydrreferral-api.tar.gz
            rm mydrreferral-api.tar.gz
            
            # Set proper permissions
            sudo chown -R ec2-user:ec2-user /var/www/mydrreferral/Api
            
            # Start the API service
            sudo systemctl start mydrreferral-api.service
            sudo systemctl status mydrreferral-api.service

  # Database Migration
  migrate-database:
    runs-on: ubuntu-latest
    needs: deploy-api
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Run database migrations
        run: |
          cd Api
          dotnet ef database update --project MyDrReferral.Data --startup-project MyDrReferral.Api
        env:
          ConnectionStrings__DefaultConnection: ${{ secrets.DATABASE_CONNECTION_STRING }}

  # Health Check
  health-check:
    runs-on: ubuntu-latest
    needs: [deploy-api, migrate-database]
    steps:
      - name: Wait for API to be ready
        run: |
          sleep 30
          for i in {1..10}; do
            if curl -f http://${{ secrets.EC2_HOST }}/api/health; then
              echo "API is healthy!"
              exit 0
            fi
            echo "Attempt $i: API not ready yet, waiting..."
            sleep 10
          done
          echo "API health check failed!"
          exit 1

      - name: Test API endpoints
        run: |
          # Test health endpoint
          curl -f http://${{ secrets.EC2_HOST }}/api/health
          
          # Test API connectivity
          curl -f http://${{ secrets.EC2_HOST }}/api/User/test || echo "User endpoint test failed"
          
          echo "All API tests passed!"

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-api, migrate-database, health-check]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-frontend.result }}" == "success" ] && [ "${{ needs.deploy-api.result }}" == "success" ] && [ "${{ needs.migrate-database.result }}" == "success" ] && [ "${{ needs.health-check.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
            echo "Frontend: http://${{ secrets.S3_BUCKET_NAME }}.s3-website.ap-south-1.amazonaws.com"
            echo "API: http://${{ secrets.EC2_HOST }}"
          else
            echo "❌ Deployment failed!"
            echo "Frontend: ${{ needs.deploy-frontend.result }}"
            echo "API: ${{ needs.deploy-api.result }}"
            echo "Database: ${{ needs.migrate-database.result }}"
            echo "Health: ${{ needs.health-check.result }}"
            exit 1
          fi
