name: Deploy MyDrReferral - Free Tier

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-south-1

jobs:
  # Deploy Frontend to S3
  deploy-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: Frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd Frontend
          npm ci

      - name: Build React app
        run: |
          cd Frontend
          npm run build
          echo "Build completed. Checking output directory..."
          ls -la out/ || echo "out/ directory not found"
          echo "Contents of Frontend directory:"
          ls -la
        env:
          NEXT_PUBLIC_API_URL: http://52.66.197.58

      - name: Debug GitHub Secrets
        run: |
          echo "Checking if secrets are available..."
          if [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "‚úÖ AWS_ACCESS_KEY_ID is set (length: ${#AWS_ACCESS_KEY_ID})"
          else
            echo "‚ùå AWS_ACCESS_KEY_ID is not set"
          fi
          if [ -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "‚úÖ AWS_SECRET_ACCESS_KEY is set (length: ${#AWS_SECRET_ACCESS_KEY})"
          else
            echo "‚ùå AWS_SECRET_ACCESS_KEY is not set"
          fi
          if [ -n "${{ secrets.S3_BUCKET_NAME }}" ]; then
            echo "‚úÖ S3_BUCKET_NAME is set: ${{ secrets.S3_BUCKET_NAME }}"
          else
            echo "‚ùå S3_BUCKET_NAME is not set"
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Verify AWS credentials
        run: |
          echo "Testing AWS credentials..."
          echo "AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:0:10}..."
          echo "AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:0:10}..."
          aws sts get-caller-identity
          echo "AWS credentials verified successfully!"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deploy to S3
        run: |
          echo "Deploying frontend to S3 bucket: ${{ secrets.S3_BUCKET_NAME }}"
          echo "Checking if Frontend/out/ directory exists..."
          if [ -d "Frontend/out" ]; then
            echo "‚úÖ Frontend/out/ directory found"
            aws s3 sync Frontend/out/ s3://${{ secrets.S3_BUCKET_NAME }} --delete
            aws s3 cp Frontend/out/index.html s3://${{ secrets.S3_BUCKET_NAME }}/index.html
            echo "Frontend deployment completed successfully!"
          else
            echo "‚ùå Frontend/out/ directory not found"
            echo "Available directories in Frontend:"
            ls -la Frontend/
            echo "Trying to find build output..."
            find Frontend/ -name "*.html" -o -name "index.*" | head -10
            exit 1
          fi

  # Deploy API to EC2
  deploy-api:
    runs-on: ubuntu-latest
    needs: deploy-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: |
          cd Api
          dotnet restore

      - name: Build API
        run: |
          cd Api
          echo "Building only the API project (excluding database project)..."
          dotnet build MyDrReferral.Api/MyDrReferral.Api.csproj --configuration Release --no-restore

      - name: Publish API
        run: |
          cd Api
          dotnet publish MyDrReferral.Api/MyDrReferral.Api.csproj \
            --configuration Release \
            --output ./publish \
            --no-restore

      - name: Create deployment package
        run: |
          cd Api
          echo "Creating deployment package..."
          echo "Contents of publish directory:"
          ls -la publish/
          tar -czf mydrreferral-api.tar.gz -C publish .
          echo "Deployment package created:"
          ls -la mydrreferral-api.tar.gz
          echo "Package size: $(du -h mydrreferral-api.tar.gz)"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Stop the API service
            sudo systemctl stop mydrreferral-api.service || true
            
            # Backup current deployment
            sudo cp -r /var/www/mydrreferral/Api /var/www/mydrreferral/Api.backup.$(date +%Y%m%d_%H%M%S) || true
            
            # Create deployment directory
            sudo mkdir -p /var/www/mydrreferral/Api
            sudo chown -R ec2-user:ec2-user /var/www/mydrreferral/Api

      - name: Debug deployment package
        run: |
          echo "Checking deployment package before copy..."
          echo "Source file exists: $(ls -la Api/mydrreferral-api.tar.gz)"
          echo "File size: $(du -h Api/mydrreferral-api.tar.gz)"
          echo "Current directory contents:"
          ls -la Api/

      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "Api/mydrreferral-api.tar.gz"
          target: "/var/www/mydrreferral/Api/"

      - name: Extract and start API
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Checking EC2 deployment directory..."
            ls -la /var/www/mydrreferral/Api/
            echo "Looking for deployment package..."
            find /var/www/mydrreferral/ -name "*.tar.gz" -type f
            echo "Checking if file was copied..."
            if [ -f "/var/www/mydrreferral/Api/mydrreferral-api.tar.gz" ]; then
              echo "‚úÖ Package found at expected location"
              ls -la /var/www/mydrreferral/Api/mydrreferral-api.tar.gz
            else
              echo "‚ùå Package not found at expected location"
              echo "Searching entire filesystem..."
              find / -name "mydrreferral-api.tar.gz" -type f 2>/dev/null || echo "Not found anywhere"
            fi
            
            cd /var/www/mydrreferral/Api
            if [ -f "mydrreferral-api.tar.gz" ]; then
              echo "‚úÖ Deployment package found in current directory, extracting..."
              # Extract to current directory (not a subdirectory)
              tar -xzf mydrreferral-api.tar.gz
              rm mydrreferral-api.tar.gz
              echo "‚úÖ Extraction completed"
            elif [ -f "Api/mydrreferral-api.tar.gz" ]; then
              echo "‚úÖ Deployment package found in Api/ subdirectory, extracting..."
              cd Api
              tar -xzf mydrreferral-api.tar.gz
              rm mydrreferral-api.tar.gz
              echo "‚úÖ Extraction completed"
            else
              echo "‚ùå Deployment package not found!"
              echo "Available files:"
              ls -la
              echo "Looking in subdirectories:"
              find . -name "*.tar.gz" -type f
              exit 1
            fi
            
            # Set proper permissions
            sudo chown -R ec2-user:ec2-user /var/www/mydrreferral/Api
            
            # Debug: Check what's in the extracted package
            echo "üîç Debugging extracted package structure..."
            ls -la /var/www/mydrreferral/Api/
            echo "Checking for MyDrReferral.Api directory..."
            find /var/www/mydrreferral/Api/ -name "MyDrReferral.Api*" -type d
            echo "Checking for .dll files..."
            find /var/www/mydrreferral/Api/ -name "*.dll" -type f
            echo "Checking dotnet installation..."
            which dotnet
            
            # Check if .NET is available in common locations
            if command -v dotnet &> /dev/null; then
              echo "‚úÖ .NET found in PATH:"
              dotnet --version
            elif [ -f "/root/.dotnet/dotnet" ]; then
              echo "‚úÖ .NET found at /root/.dotnet/dotnet:"
              /root/.dotnet/dotnet --version
            elif [ -f "/usr/bin/dotnet" ]; then
              echo "‚úÖ .NET found at /usr/bin/dotnet:"
              /usr/bin/dotnet --version
            else
              echo "‚ùå .NET not found! Installing .NET 8 Runtime..."
              
              # Install required packages
              sudo yum update -y
              sudo yum install -y wget curl
              
              # Install .NET 8 using Microsoft's official repository
              echo "Installing .NET 8 using Microsoft repository..."
              sudo rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm
              sudo yum install -y dotnet-runtime-8.0
              
              # Verify installation
              if command -v dotnet &> /dev/null; then
                echo "‚úÖ .NET installation completed:"
                dotnet --version
              elif [ -f "/usr/bin/dotnet" ]; then
                echo "‚úÖ .NET installation completed:"
                /usr/bin/dotnet --version
              else
                echo "‚ùå .NET installation failed! Trying alternative method..."
                
                # Alternative installation method using the install script
                curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel 8.0
                
                # Add to PATH for current session
                export DOTNET_ROOT=$HOME/.dotnet
                export PATH=$PATH:$HOME/.dotnet
                
                # Create symlink for system-wide access
                sudo ln -sf $HOME/.dotnet/dotnet /usr/bin/dotnet
                
                # Verify alternative installation
                if [ -f "$HOME/.dotnet/dotnet" ]; then
                  echo "‚úÖ .NET installation completed via script:"
                  $HOME/.dotnet/dotnet --version
                else
                  echo "‚ùå All .NET installation methods failed!"
                  echo "Available files in home directory:"
                  ls -la $HOME/
                  exit 1
                fi
              fi
            fi
            
            # Update the startup script to point to the correct location
            echo "üîß Updating startup script with latest fixes..."
            sudo cat > /var/www/mydrreferral/start-api.sh << 'EOF'
            #!/bin/bash
            set -e  # Exit on any error
            set -x  # Print commands as they execute
            
            echo "Starting MyDrReferral API..."
            echo "Current directory: $(pwd)"
            echo "Available files:"
            ls -la
            
            # Install .NET if not found
            echo "üîß Checking .NET installation..."
            if ! command -v dotnet &> /dev/null; then
              echo "‚ùå .NET not found! Installing .NET 8 Runtime..."
              
              # Install required packages
              sudo yum update -y
              sudo yum install -y wget curl
              
              # Install .NET 8 using Microsoft's official repository
              echo "Installing .NET 8 using Microsoft repository..."
              sudo rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm
              sudo yum install -y dotnet-runtime-8.0
              
              # Verify installation
              if command -v dotnet &> /dev/null; then
                echo "‚úÖ .NET installation completed:"
                dotnet --version
              else
                echo "‚ùå Package installation failed! Trying alternative method..."
                
                # Alternative installation method using the install script
                curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel 8.0
                
                # Add to PATH for current session
                export DOTNET_ROOT=$HOME/.dotnet
                export PATH=$PATH:$HOME/.dotnet
                
                # Create symlink for system-wide access
                sudo ln -sf $HOME/.dotnet/dotnet /usr/bin/dotnet
                
                # Verify alternative installation
                if [ -f "$HOME/.dotnet/dotnet" ]; then
                  echo "‚úÖ .NET installation completed via script:"
                  $HOME/.dotnet/dotnet --version
                else
                  echo "‚ùå All .NET installation methods failed!"
                  exit 1
                fi
              fi
            fi
            
            # Ensure .NET environment variables are set
            echo "üîß Setting up .NET environment..."
            if [ -d "$HOME/.dotnet" ]; then
              export DOTNET_ROOT=$HOME/.dotnet
              export PATH=$PATH:$HOME/.dotnet
              echo "‚úÖ Set DOTNET_ROOT to $HOME/.dotnet"
            elif [ -d "/usr/share/dotnet" ]; then
              export DOTNET_ROOT=/usr/share/dotnet
              export PATH=$PATH:/usr/share/dotnet
              echo "‚úÖ Set DOTNET_ROOT to /usr/share/dotnet"
            fi
            
            # Verify .NET is working
            echo "Testing .NET installation..."
            dotnet --version
            
            # Find .NET installation
            DOTNET_CMD=""
            if command -v dotnet &> /dev/null; then
              DOTNET_CMD="dotnet"
              echo "‚úÖ .NET found in PATH"
            elif [ -f "/usr/bin/dotnet" ]; then
              DOTNET_CMD="/usr/bin/dotnet"
              echo "‚úÖ .NET found at /usr/bin/dotnet"
            elif [ -f "/root/.dotnet/dotnet" ]; then
              DOTNET_CMD="/root/.dotnet/dotnet"
              echo "‚úÖ .NET found at /root/.dotnet/dotnet"
            elif [ -f "$HOME/.dotnet/dotnet" ]; then
              DOTNET_CMD="$HOME/.dotnet/dotnet"
              echo "‚úÖ .NET found at $HOME/.dotnet/dotnet"
            else
              echo "‚ùå .NET not found anywhere!"
              echo "Searching for dotnet in common locations..."
              find /usr -name "dotnet" -type f 2>/dev/null | head -5
              find /opt -name "dotnet" -type f 2>/dev/null | head -5
              find $HOME -name "dotnet" -type f 2>/dev/null | head -5
              exit 1
            fi
            
            # Verify .NET is working
            echo "Testing .NET installation..."
            $DOTNET_CMD --version
            
            # Find the correct API directory
            API_DIR=$(find /var/www/mydrreferral/Api/ -name "MyDrReferral.Api*" -type d | head -1)
            
            # If no subdirectory found, check if .dll files are directly in Api/ or nested Api/Api/
            if [ -z "$API_DIR" ]; then
              if [ -f "/var/www/mydrreferral/Api/MyDrReferral.Api.dll" ]; then
                API_DIR="/var/www/mydrreferral/Api"
                echo "Found API files directly in Api/ directory"
              elif [ -f "/var/www/mydrreferral/Api/Api/MyDrReferral.Api.dll" ]; then
                API_DIR="/var/www/mydrreferral/Api/Api"
                echo "Found API files in nested Api/Api/ directory"
              else
                echo "‚ùå MyDrReferral.Api directory or .dll file not found!"
                echo "Available directories:"
                find /var/www/mydrreferral/Api/ -type d
                echo "Available files:"
                ls -la /var/www/mydrreferral/Api/ | head -20
                echo "Checking nested Api/ directory:"
                ls -la /var/www/mydrreferral/Api/Api/ | head -20 2>/dev/null || echo "No nested Api/ directory found"
                exit 1
              fi
            else
              echo "Found API directory: $API_DIR"
            fi
            
            cd "$API_DIR"
            echo "Changed to: $(pwd)"
            echo "Files in API directory:"
            ls -la
            
            # Set environment variables
            export ASPNETCORE_ENVIRONMENT=Production
            export ASPNETCORE_URLS=http://+:5000
            
            # Run database migrations before starting API
            echo "üîß Running database migrations..."
            export ConnectionStrings__DefaultConnection="Host=10.0.1.150;Port=5432;Database=postgres;Username=postgres;Password=MyDrReferral123;"
            
            # Install EF tools if not available
            if ! command -v dotnet-ef &> /dev/null; then
              echo "Installing Entity Framework tools..."
              $DOTNET_CMD tool install --global dotnet-ef
              export PATH="$PATH:$HOME/.dotnet/tools"
            fi
            
            # Ensure EF tools can find .NET runtime
            echo "üîß Verifying EF tools can find .NET runtime..."
            dotnet-ef --version
            
            # Test migration project files exist
            echo "üîç Checking migration project files..."
            if [ -f "MyDrReferral.Data/MyDrReferral.Data.csproj" ]; then
              echo "‚úÖ Data project found: MyDrReferral.Data/MyDrReferral.Data.csproj"
            else
              echo "‚ùå Data project not found: MyDrReferral.Data/MyDrReferral.Data.csproj"
              echo "Available .csproj files:"
              find . -name "*.csproj" -type f
              exit 1
            fi
            
            if [ -f "MyDrReferral.Api/MyDrReferral.Api.csproj" ]; then
              echo "‚úÖ API project found: MyDrReferral.Api/MyDrReferral.Api.csproj"
            else
              echo "‚ùå API project not found: MyDrReferral.Api/MyDrReferral.Api.csproj"
              echo "Available .csproj files:"
              find . -name "*.csproj" -type f
              exit 1
            fi
            
            # Run migrations
            echo "Running database update..."
            echo "Migration command: $DOTNET_CMD ef database update --project MyDrReferral.Data/MyDrReferral.Data.csproj --startup-project MyDrReferral.Api/MyDrReferral.Api.csproj --connection \"$ConnectionStrings__DefaultConnection\" --verbose"
            
            # Run migration with direct error output
            if $DOTNET_CMD ef database update --project MyDrReferral.Data/MyDrReferral.Data.csproj --startup-project MyDrReferral.Api/MyDrReferral.Api.csproj --connection "$ConnectionStrings__DefaultConnection" --verbose; then
              echo "‚úÖ Database migrations completed successfully"
            else
              echo "‚ùå Database migrations failed with exit code $?"
              echo "Migration error details:"
              echo "Connection string: $ConnectionStrings__DefaultConnection"
              echo "API directory: $(pwd)"
              echo "Available files:"
              ls -la
              echo "Available .csproj files:"
              find . -name "*.csproj" -type f
              exit 1
            fi
            
            # Start the API
            echo "Starting API with: $DOTNET_CMD MyDrReferral.Api.dll"
            echo "Final environment check:"
            echo "DOTNET_ROOT: $DOTNET_ROOT"
            echo "PATH: $PATH"
            echo "Working directory: $(pwd)"
            echo "API files:"
            ls -la *.dll *.json 2>/dev/null || echo "No DLL/JSON files found"
            
            exec $DOTNET_CMD MyDrReferral.Api.dll
            EOF
            
            sudo chmod +x /var/www/mydrreferral/start-api.sh
            
            # Install and configure Nginx
            echo "üîß Installing and configuring Nginx..."
            sudo amazon-linux-extras install -y nginx1
            
            # Verify Nginx installation
            if systemctl is-active --quiet nginx || systemctl is-active --quiet nginx1; then
              echo "‚úÖ Nginx installed and running successfully"
            elif command -v nginx &> /dev/null; then
              echo "‚úÖ Nginx installed successfully"
            elif systemctl list-unit-files | grep -q nginx; then
              echo "‚úÖ Nginx service found"
            else
              echo "‚ùå Nginx installation failed"
              echo "Checking available services..."
              systemctl list-unit-files | grep nginx || echo "No nginx services found"
              exit 1
            fi
            
            # Create Nginx configuration for API proxy
            echo "Creating Nginx configuration..."
            sudo tee /etc/nginx/conf.d/mydrreferral.conf > /dev/null << 'EOF'
            server {
                listen 80;
                server_name _;
                
                location / {
                    proxy_pass http://localhost:5000;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
            }
            EOF
            
            # Test and start Nginx
            sudo nginx -t
            sudo systemctl enable nginx
            sudo systemctl start nginx
            sudo systemctl reload nginx
            
            echo "‚úÖ Nginx configured and started"
            
            # Restart the API service
            # Fix DNS resolution for RDS
            echo "üîß Fixing DNS resolution for RDS..."
            echo "Testing DNS resolution..."
            nslookup mydrreferral-db.c9og0uw2ieyc.ap-south-1.rds.amazonaws.com || echo "DNS lookup failed"
            ping -c 2 mydrreferral-db.c9og0uw2ieyc.ap-south-1.rds.amazonaws.com || echo "Ping failed"
            
            # Test RDS connectivity
            echo "üîß Testing RDS connectivity..."
            echo "Testing connection to RDS IP: 3.7.115.75:5432"
            timeout 10 bash -c "</dev/tcp/3.7.115.75/5432" && echo "‚úÖ RDS connection successful" || echo "‚ùå RDS connection failed"
            
            # Test with telnet if available
            if command -v telnet &> /dev/null; then
              echo "Testing with telnet..."
              timeout 5 telnet 3.7.115.75 5432 || echo "Telnet test failed"
            fi
            
            # Test with nc (netcat) if available
            if command -v nc &> /dev/null; then
              echo "Testing with netcat..."
              timeout 5 nc -zv 3.7.115.75 5432 || echo "Netcat test failed"
            fi
            
            # Test with psql if available
            if command -v psql &> /dev/null; then
              echo "Testing with psql..."
              timeout 10 psql -h 3.7.115.75 -p 5432 -U postgres -d postgres -c "SELECT 1;" || echo "Psql test failed"
            fi
            
            echo "Restarting API service..."
            sudo systemctl daemon-reload
            sudo systemctl restart mydrreferral-api.service
            sudo systemctl status mydrreferral-api.service
            
            # Wait a moment for service to start
            sleep 5
            
            # Check if API is listening on port 5000
            echo "üîç Checking if API is listening on port 5000..."
            netstat -tlnp | grep :5000 || echo "Port 5000 not listening"
            
            # Check API service logs
            echo "üîç Checking API service logs..."
            sudo journalctl -u mydrreferral-api.service --no-pager -n 20
            
            # Check startup log file for detailed migration errors
            echo "üîç Checking startup log file for detailed migration errors..."
            if [ -f "/var/log/mydrreferral-startup.log" ]; then
              echo "‚úÖ Startup log file found, showing last 50 lines:"
              sudo tail -50 /var/log/mydrreferral-startup.log
            else
              echo "‚ùå Startup log file not found at /var/log/mydrreferral-startup.log"
            fi
            
            # Show final status
            echo "üîç Final service status:"
            sudo systemctl status nginx
            sudo systemctl status mydrreferral-api.service

  # Database Migration
  migrate-database:
    runs-on: ubuntu-latest
    needs: deploy-api
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Install Entity Framework tools
        run: |
          dotnet tool install --global dotnet-ef
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Verify EF tools installation
        run: |
          dotnet ef --version
          echo "‚úÖ Entity Framework tools installed successfully"

      - name: Restore dependencies
        run: |
          cd Api
          echo "Restoring dependencies for all projects..."
          dotnet restore MyDrReferral.Api/MyDrReferral.Api.csproj

      - name: Run database migrations
        run: |
          cd Api
          echo "üîç Debugging database migration..."
          echo "Current directory: $(pwd)"
          echo "Available projects:"
          find . -name "*.csproj" -type f
          echo "Checking EF tools:"
          dotnet ef --version
          echo "Setting up environment variables..."
          export ConnectionStrings__DefaultConnection="Host=10.0.1.150;Port=5432;Database=postgres;Username=postgres;Password=MyDrReferral123;"
          echo "Connection string set (first 50 chars): ${ConnectionStrings__DefaultConnection:0:50}..."
          echo "Environment variables:"
          env | grep -i connection
          echo "Testing connection string format..."
          echo "Expected format: Host=...;Database=...;Username=...;Password=..."
          
          # Check if connection string points to localhost
          if [[ "$ConnectionStrings__DefaultConnection" == *"Host=localhost"* ]] || [[ "$ConnectionStrings__DefaultConnection" == *"Host=127.0.0.1"* ]]; then
            echo "‚ö†Ô∏è  WARNING: Connection string points to localhost!"
            echo "This will fail in GitHub Actions as there's no local PostgreSQL."
            echo "Please update your DATABASE_CONNECTION_STRING secret to point to your RDS database."
            echo "Example: Host=your-rds-endpoint.region.rds.amazonaws.com;Database=mydrreferral;Username=mydrreferral;Password=your-password"
            echo "Skipping migration for now..."
            exit 0
          fi
          
          echo "Testing database connection first..."
          # Extract host and port for testing
          HOST=$(echo "$ConnectionStrings__DefaultConnection" | grep -o 'Host=[^;]*' | cut -d'=' -f2)
          PORT=$(echo "$ConnectionStrings__DefaultConnection" | grep -o 'Port=[^;]*' | cut -d'=' -f2)
          echo "Testing connection to $HOST:$PORT"
          
          # Test connection with retry
          for i in {1..3}; do
            echo "Connection attempt $i..."
            timeout 30 bash -c "echo > /dev/tcp/$HOST/$PORT" && echo "‚úÖ Connection successful" && break || echo "‚ùå Connection attempt $i failed"
            sleep 5
          done
          
          echo "Running database migration with retry logic..."
          # Run migration with retry
          for i in {1..3}; do
            echo "Migration attempt $i..."
            if dotnet ef database update --project MyDrReferral.Data/MyDrReferral.Data.csproj --startup-project MyDrReferral.Api/MyDrReferral.Api.csproj --verbose --connection "Host=10.0.1.150;Port=5432;Database=postgres;Username=postgres;Password=MyDrReferral123;" --timeout 60; then
              echo "‚úÖ Migration successful"
              break
            else
              echo "‚ùå Migration attempt $i failed"
              if [ $i -lt 3 ]; then
                echo "Waiting 10 seconds before retry..."
                sleep 10
              fi
            fi
          done
        env:
          ConnectionStrings__DefaultConnection: "Host=10.0.1.150;Port=5432;Database=postgres;Username=postgres;Password=MyDrReferral123;"
          ASPNETCORE_ENVIRONMENT: Production

  # Health Check
  health-check:
    runs-on: ubuntu-latest
    needs: [deploy-api, migrate-database]
    steps:
      - name: Wait for API to be ready
        run: |
          sleep 30
          echo "üîç Starting API health check..."
          echo "Testing API at: http://${{ secrets.EC2_HOST }}/api/healthcheck/success"
          
          for i in {1..10}; do
            echo "Attempt $i: Testing API health..."
            if curl -f -m 10 http://${{ secrets.EC2_HOST }}/api/healthcheck/success; then
              echo "‚úÖ API is healthy!"
              exit 0
            else
              echo "‚ùå API not ready yet, waiting..."
              sleep 10
            fi
          done
          
          echo "‚ùå API health check failed after 10 attempts!"
          echo "üîç Debugging information:"
          echo "EC2 Host: ${{ secrets.EC2_HOST }}"
          echo "Testing basic connectivity..."
          ping -c 3 ${{ secrets.EC2_HOST }} || echo "Ping failed"
          echo "Testing port 80..."
          telnet ${{ secrets.EC2_HOST }} 80 || echo "Port 80 not accessible"
          echo ""
          echo "Please check:"
          echo "1. EC2 instance is running"
          echo "2. Security group allows port 80"
          echo "3. API service is running on EC2"
          echo "4. Nginx is configured properly"
          echo ""
          echo "SSH into EC2 and run:"
          echo "sudo systemctl status mydrreferral-api.service"
          echo "sudo journalctl -u mydrreferral-api.service -f"
          exit 1

      - name: Test API endpoints
        run: |
          # Test health endpoint
          curl -f http://${{ secrets.EC2_HOST }}/api/healthcheck/success
          
          # Test API connectivity
          curl -f http://${{ secrets.EC2_HOST }}/api/User/test || echo "User endpoint test failed"
          
          echo "All API tests passed!"

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-api, migrate-database, health-check]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-frontend.result }}" == "success" ] && [ "${{ needs.deploy-api.result }}" == "success" ] && [ "${{ needs.migrate-database.result }}" == "success" ] && [ "${{ needs.health-check.result }}" == "success" ]; then
            echo "‚úÖ Deployment successful!"
            echo "Frontend: http://${{ secrets.S3_BUCKET_NAME }}.s3-website.ap-south-1.amazonaws.com"
            echo "API: http://${{ secrets.EC2_HOST }}"
          else
            echo "‚ùå Deployment failed!"
            echo "Frontend: ${{ needs.deploy-frontend.result }}"
            echo "API: ${{ needs.deploy-api.result }}"
            echo "Database: ${{ needs.migrate-database.result }}"
            echo "Health: ${{ needs.health-check.result }}"
            exit 1
          fi
